import React, { useState, useEffect, useMemo } from 'react';
import { MapContainer, TileLayer, Marker, Popup, CircleMarker } from 'react-leaflet';
import { Map, Layers, Download, Info, AlertTriangle, Droplets, Thermometer, Users } from 'lucide-react';
import L from 'leaflet';
import vulnerabilityData from '../data/vulnerability_map.json';

// Fix for default markers in react-leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

/**
 * Vulnerability Maps component with interactive mapping and risk visualization
 * @returns {React.Component} Vulnerability maps page
 */
const VulnerabilityMaps = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedLayer, setSelectedLayer] = useState('overall');
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [showLegend, setShowLegend] = useState(true);

  // Map center (Nigeria)
  const mapCenter = [9.0820, 8.6753];
  const mapZoom = 6;

  // Load vulnerability data
  useEffect(() => {
    const loadData = async () => {
      try {
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        setData(vulnerabilityData.vulnerability_map);
      } catch (error) {
        console.error('Error loading vulnerability data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  /**
   * Get risk level color
   * @param {string} riskLevel - Risk level (Low, Medium, High, Critical)
   * @returns {string} Color code
   */
  const getRiskColor = (riskLevel) => {
    const colors = {
      'Low': '#22c55e',
      'Medium': '#eab308',
      'High': '#f97316',
      'Critical': '#ef4444'
    };
    return colors[riskLevel] || '#6b7280';
  };

  /**
   * Get risk value based on selected layer
   * @param {Object} region - Region data
   * @returns {number} Risk value
   */
  const getRiskValue = (region) => {
    switch (selectedLayer) {
      case 'flood':
        return region.flood_risk;
      case 'drought':
        return region.drought_risk;
      case 'temperature':
        return region.temperature_increase;
      case 'population':
        return region.population_exposed / 1000000; // Convert to millions
      default:
        return (region.flood_risk + region.drought_risk + region.temperature_increase) / 3;
    }
  };

  /**
   * Get circle radius based on risk value
   * @param {number} value - Risk value
   * @returns {number} Circle radius
   */
  const getCircleRadius = (value) => {
    const minRadius = 15;
    const maxRadius = 50;
    const normalizedValue = Math.min(Math.max(value / 10, 0), 1);
    return minRadius + (normalizedValue * (maxRadius - minRadius));
  };

  /**
   * Export map as PNG (simplified version)
   */
  const exportMap = () => {
    // In a real implementation, you would use a library like html2canvas
    // For now, we'll just download the data as JSON
    const exportData = {
      layer: selectedLayer,
      data: data,
      timestamp: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability_map_${selectedLayer}_${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  // Layer options
  const layerOptions = [
    { value: 'overall', label: 'Overall Risk', icon: AlertTriangle },
    { value: 'flood', label: 'Flood Risk', icon: Droplets },
    { value: 'drought', label: 'Drought Risk', icon: Thermometer },
    { value: 'temperature', label: 'Temperature Increase', icon: Thermometer },
    { value: 'population', label: 'Population Exposure', icon: Users }
  ];

  // Statistics
  const statistics = useMemo(() => {
    if (data.length === 0) return {};
    
    const criticalRegions = data.filter(r => r.risk_level === 'Critical').length;
    const highRiskRegions = data.filter(r => r.risk_level === 'High').length;
    const totalPopulation = data.reduce((sum, r) => sum + r.population_exposed, 0);
    const avgFloodRisk = data.reduce((sum, r) => sum + r.flood_risk, 0) / data.length;
    
    return {
      criticalRegions,
      highRiskRegions,
      totalPopulation,
      avgFloodRisk: avgFloodRisk.toFixed(1)
    };
  }, [data]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="loading-spinner mx-auto mb-4" />
          <p className="text-gray-600">Loading vulnerability maps...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Map className="h-8 w-8 text-primary-600" />
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Vulnerability Maps</h1>
                <p className="text-gray-600 mt-1">
                  Interactive visualization of climate risks across Nigeria
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowLegend(!showLegend)}
                className="flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
              >
                <Layers className="h-4 w-4" />
                <span>{showLegend ? 'Hide' : 'Show'} Legend</span>
              </button>
              <button
                onClick={exportMap}
                className="flex items-center space-x-2 px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors duration-200"
              >
                <Download className="h-4 w-4" />
                <span>Export</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="flex h-screen">
        {/* Sidebar */}
        <div className="w-80 bg-white shadow-lg overflow-y-auto">
          {/* Layer Selection */}
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Map Layers</h3>
            <div className="space-y-2">
              {layerOptions.map((option) => {
                const IconComponent = option.icon;
                return (
                  <button
                    key={option.value}
                    onClick={() => setSelectedLayer(option.value)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors duration-200 ${
                      selectedLayer === option.value
                        ? 'bg-primary-50 text-primary-700 border border-primary-200'
                        : 'text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    <IconComponent className="h-5 w-5" />
                    <span className="font-medium">{option.label}</span>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Statistics */}
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Statistics</h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Critical Risk Regions</span>
                <span className="text-sm font-semibold text-red-600">{statistics.criticalRegions}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">High Risk Regions</span>
                <span className="text-sm font-semibold text-orange-600">{statistics.highRiskRegions}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Total Population Exposed</span>
                <span className="text-sm font-semibold text-gray-900">
                  {(statistics.totalPopulation / 1000000).toFixed(1)}M
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Avg. Flood Risk</span>
                <span className="text-sm font-semibold text-blue-600">{statistics.avgFloodRisk}/10</span>
              </div>
            </div>
          </div>

          {/* Legend */}
          {showLegend && (
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Risk Levels</h3>
              <div className="space-y-3">
                {['Low', 'Medium', 'High', 'Critical'].map((level) => (
                  <div key={level} className="flex items-center space-x-3">
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{ backgroundColor: getRiskColor(level) }}
                    />
                    <span className="text-sm text-gray-700">{level} Risk</span>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-xs text-gray-500">
                Circle size represents risk intensity
              </div>
            </div>
          )}

          {/* Selected Region Info */}
          {selectedRegion && (
            <div className="p-6 border-t border-gray-200 bg-gray-50">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                {selectedRegion.region}, {selectedRegion.state}
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Overall Risk</span>
                  <span className={`text-sm font-semibold px-2 py-1 rounded-full ${
                    selectedRegion.risk_level === 'Critical' ? 'bg-red-100 text-red-800' :
                    selectedRegion.risk_level === 'High' ? 'bg-orange-100 text-orange-800' :
                    selectedRegion.risk_level === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {selectedRegion.risk_level}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Flood Risk</span>
                  <span className="text-sm font-semibold text-blue-600">
                    {selectedRegion.flood_risk}/10
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Drought Risk</span>
                  <span className="text-sm font-semibold text-orange-600">
                    {selectedRegion.drought_risk}/10
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Temperature Increase</span>
                  <span className="text-sm font-semibold text-red-600">
                    +{selectedRegion.temperature_increase}°C
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Population Exposed</span>
                  <span className="text-sm font-semibold text-gray-900">
                    {(selectedRegion.population_exposed / 1000000).toFixed(1)}M
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Adaptation Priority</span>
                  <span className={`text-sm font-semibold px-2 py-1 rounded-full ${
                    selectedRegion.adaptation_priority === 'Critical' ? 'bg-red-100 text-red-800' :
                    selectedRegion.adaptation_priority === 'High' ? 'bg-orange-100 text-orange-800' :
                    'bg-yellow-100 text-yellow-800'
                  }`}>
                    {selectedRegion.adaptation_priority}
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Map */}
        <div className="flex-1 relative">
          <MapContainer
            center={mapCenter}
            zoom={mapZoom}
            style={{ height: '100%', width: '100%' }}
            className="z-10"
          >
            <TileLayer
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            
            {data.map((region) => {
              const riskValue = getRiskValue(region);
              const radius = getCircleRadius(riskValue);
              const color = getRiskColor(region.risk_level);
              
              return (
                <CircleMarker
                  key={region.region}
                  center={[region.coordinates.lat, region.coordinates.lng]}
                  radius={radius}
                  fillColor={color}
                  color={color}
                  weight={2}
                  opacity={0.8}
                  fillOpacity={0.6}
                  eventHandlers={{
                    click: () => setSelectedRegion(region)
                  }}
                >
                  <Popup>
                    <div className="p-2">
                      <h4 className="font-semibold text-gray-900 mb-2">
                        {region.region}, {region.state}
                      </h4>
                      <div className="space-y-1 text-sm">
                        <div className="flex justify-between">
                          <span>Risk Level:</span>
                          <span className={`font-medium ${
                            region.risk_level === 'Critical' ? 'text-red-600' :
                            region.risk_level === 'High' ? 'text-orange-600' :
                            region.risk_level === 'Medium' ? 'text-yellow-600' :
                            'text-green-600'
                          }`}>
                            {region.risk_level}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Population:</span>
                          <span className="font-medium">
                            {(region.population_exposed / 1000000).toFixed(1)}M
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Priority:</span>
                          <span className="font-medium">{region.adaptation_priority}</span>
                        </div>
                      </div>
                    </div>
                  </Popup>
                </CircleMarker>
              );
            })}
          </MapContainer>

          {/* Map overlay info */}
          <div className="absolute top-4 right-4 bg-white rounded-lg shadow-lg p-4 z-20">
            <div className="flex items-center space-x-2 mb-2">
              <Info className="h-5 w-5 text-primary-600" />
              <span className="font-medium text-gray-900">Current Layer</span>
            </div>
            <p className="text-sm text-gray-600">
              {layerOptions.find(opt => opt.value === selectedLayer)?.label}
            </p>
            <p className="text-xs text-gray-500 mt-2">
              Click on regions for detailed information
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityMaps;